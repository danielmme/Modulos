<?php


/**
 * Implements hook_permission().
 */
 function my_table_permission() {
  return array(

      'submit my_table' => array(
      'title' => t('Enviar'),
      'description' => t('Submit the formul'),
      ),
  );
}

/**
 * Implements hook_menu().
 */
function my_table_menu() {
  $items = array();
  
   $items['my-table'] = array(
    'title' => 'Pagina de Teste',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('submit my_table'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_table_form'),
);
  return $items;
}
/*
 * Implements hook_form().
 */
function my_table_form($form, &$form_state) {

  $form['nome'] = array(
    '#type' => 'textfield',
    '#title' => t('seu nome'),
    '#required' => TRUE,
    '#maxlength' => 160,
    '#weight' => -5,
  );

  $form['number'] = array(
    '#type' => 'textfield',
    '#title' => t('seu numero'),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 127,
    '#weight' => -5,
  );
  
   $form['submit']=array(
    '#type'=>'submit',
    '#value'=>t('add item'),
   );
  
  return $form;
}

  function my_table_validate($form, &$form_state){
  if (!is_numeric($form_state['values']['number'])){
    form_set_error('number', t('você é uma anta'));
    return FALSE;
  }
  return TRUE;
  }

  
  function my_table_form_submit($form_id, &$form_state) {
  $inserir = db_insert('my_table')
  ->fields(array(
    'number'=>$form_state['values']['number'],
    'nome'=>$form_state['values']['nome'],
    ))
  ->execute();
  drupal_set_message(t('voce mandou alguma coisa aqui seu filho da puta'));
}




/**
 * Only allow users to see the page views for their own account or if they are
 * an administrator.
 */
 function databasics_check_access($restrictions) {
 	//krumo($restrictions);
 	global $user;
 	// Change this to a different variable name so we don't accidentally
 	// change the global user object.
 	$account = $user;

 	// We need to cycle through the various levels of access control and 
 	// return TRUE when we want to allow access. Returning anything else
 	// will cause access to be denied.

 	// Does the user have permission to access all views?
 	if (user_access('access all views', $account)) {
 	  return TRUE;
 	}
 	// Is this a user with permission to access the site reports?
 	if (in_array('reports', $restrictions) && user_access('access site reports', $account)) {
 	  return TRUE;
 	}
 	// Is this an owner of a user account?
 	if (in_array('owner', $restrictions)) {
 	  // Are we on a user page?
 	  if (arg(0) == 'user' && is_numeric(arg(1))) {
 	    // Does the user ID match the profile page ID?
 	     return $account->uid == arg(1);
 	  }
 	}

 	// If no conditions are met, let's be sure to deny access by default.
 	return FALSE;
 }



/**
 * Implements hook_views_api().
 */
function my_table_views_api()
{
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'my_table'),
    );
}


if(db_table_exists('tabela')){

$query=db_select('webform_submitted_data','wdata');
$query->join('webform_component', 'wcomp','wdata.cid = wcomp.cid' );
$query->join('webform_submissions', 'w','w.sid = wdata.sid');


        $query->orderBy('wcomp.cid');
        $query->addField('wdata','cid');
        $query->addField('wdata','data');
        $query->addField('wcomp','weight');
        $query->addField('wcomp','name');
        $query->addField('wcomp','type');
        $query->addField('w','submitted');
    
 db_insert('tabela')
  ->from($query)
  ->execute();
 }





